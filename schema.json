{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "NewProjectiles",
  "description": "Defines NewProjectiles mod config layout",
  "type": "object",
  "properties": {
    "FormIDs": { "$ref": "#/$defs/FormIDsMap" },
    "HomingData": { "$ref": "#/$defs/HomingData" },
    "Triggers": { "$ref": "#/$defs/Triggers" },
    "MulticastSpawnGroups": { "$ref": "#/$defs/MulticastSpawnGroups" },
    "MulticastData": { "$ref": "#/$defs/MulticastData" },
    "EmittersData": { "$ref": "#/$defs/EmittersData" },
    "FollowersData": { "$ref": "#/$defs/FollowersData" }
  },
  "additionalProperties": false,
  "required": ["Triggers"],

  "$defs": {
    "PluginFormID": {
      "description": "PluginFormID",
      "type": "string",
      "$comment": "MyMod.esp|0x31415",
      "pattern": "^[^\\\\\\/:*?\"<>|]+\\.es[lmp]\\|(0[Xx])[\\dA-Fa-f]{1,8}$"
    },
    "form_key": {
      "type": "string",
      "pattern": "^key_[\\w\\d]+"
    },
    "FormIDsMap": {
      "type": "object",
      "description": "A map string->formID for more convenience",
      "patternProperties": {
        "^key_[\\w\\d]+": {
          "$ref": "#/$defs/FormOrID",
          "description": "A form to which the key is mapped"
        }
      },
      "additionalProperties": false
    },

    "point3": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 3,
      "maxItems": 3
    },
    "point2": {
      "type": "array",
      "items": {
        "type": "number"
      },
      "minItems": 2,
      "maxItems": 2
    },

    "FormOrID": {
      "oneOf": [
        { "$ref": "#/$defs/PluginFormID" },
        { "$ref": "#/$defs/formID" },
        { "$ref": "#/$defs/form_key" }
      ]
    },
    "formID": {
      "description": "Form id of xEdit record",
      "type": "string",
      "pattern": "^0x[0-9a-fA-F]{1,8}$"
    },

    "ifFigureNotSingle": {
      "$comment": "Size for not Single figure",
      "if": {
        "type": "object",
        "properties": {
          "shape": {}
        },
        "allOf": [
          {
            "not": {
              "type": "object",
              "properties": {
                "shape": {
                  "type": "string",
                  "const": "Single"
                }
              },
              "required": ["shape"]
            }
          },
          {
            "properties": {
              "shape": true
            },
            "required": ["shape"]
          }
        ]
      },
      "then": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Figure size (usually 50--500)",
            "minimum": 1
          }
        },
        "required": ["size"]
      }
    },
    "Figure": {
      "description": "Configure a figure",
      "type": "object",
      "properties": {
        "count": {
          "description": "Number of points in the figure (default: 1)",
          "type": "integer",
          "minimum": 1
        },
        "shape": {
          "description": "A method of position points",
          "enum": [
            "Single",
            "Line",
            "Circle",
            "HalfCircle",
            "FillSquare",
            "FillCircle",
            "FillHalfCircle",
            "Sphere",
            "HalfSphere",
            "Cylinder"
          ]
        }
      },
      "required": ["shape"],
      "allOf": [{ "$ref": "#/$defs/ifFigureNotSingle" }],
      "unevaluatedProperties": false
    },
    "Pattern": {
      "description": "Configure points pattern",
      "type": "object",
      "properties": {
        "Figure": { "$ref": "#/$defs/Figure" },
        "planeRotate": {
          "type": "number",
          "description": "An angle to rotate the figure in the plane (default: 0)"
        },
        "normal": {
          "$ref": "#/$defs/point3",
          "description": "Normal of the spawning plane (default: [0,1,0])"
        },
        "xDepends": {
          "type": "boolean",
          "description": "Is normal depends only on left-right or on up-down too (default: true)"
        },
        "origin": {
          "type": "string",
          "description": "Node name"
        },
        "posOffset": {
          "$ref": "#/$defs/point3",
          "description": "Offset from origin center to spawn group center (default: [0,0,0])"
        }
      },
      "required": ["Figure"],
      "unevaluatedProperties": false
    },

    "ifAutoAimConstSpeed": {
      "$comment": "RotationTime for ConstSpeed type",
      "if": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "ConstSpeed"
          }
        },
        "required": ["type"]
      },
      "then": {
        "type": "object",
        "properties": {
          "rotationTime": {
            "type": "number",
            "description": "Time needed to rotate at 180 deg (5, 3.5, 2.5 are nice)",
            "minimum": 0.5,
            "maximum": 100
          }
        },
        "required": ["rotationTime"]
      }
    },
    "ifAutoAimConstAccel": {
      "$comment": "Acceleration for ConstAccel type",
      "if": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "const": "ConstAccel"
          }
        },
        "required": ["type"]
      },
      "then": {
        "type": "object",
        "properties": {
          "acceleration": {
            "type": "integer",
            "description": "Acceleration length (5, 10, 50 are nice)",
            "minimum": 1,
            "maximum": 300
          }
        },
        "required": ["acceleration"]
      }
    },
    "ifAutoAimCursor": {
      "$comment": "Cursor radius for Cursor type",
      "if": {
        "type": "object",
        "properties": {
          "target": {
            "type": "string",
            "const": "Cursor"
          }
        },
        "required": ["target"]
      },
      "then": {
        "type": "object",
        "properties": {
          "cursorAngle": {
            "type": "integer",
            "description": "Angle of cone for detecting targets near the cursor (5-15 are nice, 90 is max)",
            "minimum": 0,
            "maximum": 90
          }
        },
        "required": ["cursorAngle"]
      }
    },
    "HomingData": {
      "description": "Configure homing spells",
      "type": "object",
      "patternProperties": {
        "^0x[0-9a-fA-F]{1,8}$|^(key_)": {
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of homing trajectories",
              "enum": ["ConstSpeed", "ConstAccel"]
            },
            "target": {
              "description": "How to capture target (Default: Nearest)",
              "enum": ["Cursor", "Nearest"]
            },
            "checkLOS": {
              "description": "Is it necessary for the caster to see the victim (default: false)",
              "type": "boolean"
            },
            "aggressive": {
              "description": "How aggressive targets to detect (default: Hostile)",
              "enum": ["Aggressive", "Hostile", "Any"]
            }
          },
          "allOf": [
            { "$ref": "#/$defs/ifAutoAimConstSpeed" },
            { "$ref": "#/$defs/ifAutoAimConstAccel" },
            { "$ref": "#/$defs/ifAutoAimCursor" }
          ],

          "required": ["type"],
          "unevaluatedProperties": false
        }
      },
      "additionalProperties": false
    },

    "TriggerNumberFunctionsData": {
      "type": "object",
      "description": "Change given variable using given value",
      "properties": {
        "type": {
          "enum": ["Set", "Add", "Mul"],
          "description": "How to change the value"
        },
        "value": {
          "type": "number",
          "description": "An argument of function"
        }
      },
      "required": ["type", "value"]
    },
    "TriggerFunctions_function": {
      "type": "object",
      "description": "A function to call",
      "properties": {
        "type": {
          "description": "Type of function",
          "enum": [
            "SetRotationHoming",
            "SetRotationToSight",
            "SetHoming",
            "SetEmitter",
            "SetFollower",
            "ChangeSpeed",
            "ChangeRange",
            "ApplyMultiCast",
            "DisableHoming",
            "DisableFollower",
            "DisableEmitter",
            "Placeatme",
            "SendAnimEvent",
            "Explode",
            "SetColLayer"
          ]
        },
        "on_followers": {
          "type": "boolean",
          "description": "Run function instead of on actor's followers (default: false)"
        }
      },
      "allOf": [
        {
          "if": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "SetRotationHoming"
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "ApplyMultiCast"
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "SetHoming"
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "SetEmitter"
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "SetFollower"
                  }
                },
                "required": ["type"]
              }
            ]
          },
          "then": {
            "type": "object",
            "properties": {
              "id": { "$ref": "#/$defs/form_key" }
            },
            "required": ["id"]
          }
        },
        {
          "if": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "DisableFollower"
              }
            },
            "required": ["type"]
          },
          "then": {
            "type": "object",
            "properties": {
              "restore_speed": {
                "type": "boolean",
                "description": "Keep speed or set as default (default: true)"
              }
            }
          }
        },
        {
          "if": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "Placeatme"
              }
            },
            "required": ["type"]
          },
          "then": {
            "type": "object",
            "properties": {
              "form": {
                "$ref": "#/$defs/FormOrID",
                "description": "An object to spawn"
              }
            },
            "required": ["form"]
          }
        },
        {
          "if": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "Explode"
              }
            },
            "required": ["type"]
          },
          "then": {
            "type": "object",
            "properties": {
              "explosion": {
                "$ref": "#/$defs/FormOrID",
                "description": "An explosion to explode"
              }
            },
            "required": ["explosion"]
          }
        },
        {
          "if": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "SetColLayer"
              }
            },
            "required": ["type"]
          },
          "then": {
            "type": "object",
            "properties": {
              "layer": {
                "type": "string",
                "description": "A layer to set",
                "enum": ["Actor", "Spell", "None"]
              }
            },
            "required": ["layer"]
          }
        },
        {
          "if": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "const": "SendAnimEvent"
              }
            },
            "required": ["type"]
          },
          "then": {
            "type": "object",
            "properties": {
              "event": {
                "type": "string"
              }
            },
            "required": ["event"]
          }
        },
        {
          "if": {
            "oneOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "ChangeSpeed"
                  }
                },
                "required": ["type"]
              },
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "const": "ChangeRange"
                  }
                },
                "required": ["type"]
              }
            ]
          },
          "then": {
            "type": "object",
            "properties": {
              "data": { "$ref": "#/$defs/TriggerNumberFunctionsData" }
            },
            "required": ["data"]
          }
        }
      ],
      "required": ["type"],
      "unevaluatedProperties": false
    },
    "TriggerFunctions": {
      "description": "A list of functions to set new type",
      "type": "object",
      "properties": {
        "functions": {
          "description": "Array of functions that are called",
          "type": "array",
          "items": { "$ref": "#/$defs/TriggerFunctions_function" },
          "additionalProperties": false
        },
        "disableOrigin": {
          "description": "Disable origin projectile (default: false)",
          "type": "boolean"
        }
      },
      "required": ["functions"],
      "additionalProperties": false
    },
    "Trigger": {
      "description": "A trigger that checks formID of bproj",
      "type": "object",
      "properties": {
        "event": {
          "description": "An event that triggers this trigger",
          "enum": [
            "ProjAppeared",
            "Swing",
            "HitMelee",
            "HitByMelee",
            "HitProjectile",
            "HitByProjectile",
            "Cast",
            "EffectStart",
            "EffectEnd",
            "ProjDestroyed",
            "ProjImpact"
          ]
        },
        "conditions": {
          "type": "array",
          "description": "An array of conditions",
          "items": {
            "description": "A condition entry",
            "type": "object",
            "properties": {
              "type": {
                "description": "Condition name",
                "enum": [
                  "Hand",
                  "ProjBaseIsFormID",
                  "EffectHasKwd",
                  "EffectsIsFormID",
                  "SpellHasKwd",
                  "SpellIsFormID",
                  "CasterIsFormID",
                  "CasterBaseIsFormID",
                  "CasterHasKwd",
                  "WeaponBaseIsFormID",
                  "WeaponHasKwd"
                ]
              },
              "invert": {
                "description": "whether to invert this condition when evaluating (default: false)",
                "type": "boolean"
              },
              "OR": {
                "description": "same as CK's OR flag (default: false)",
                "type": "boolean"
              }
            },
            "required": [ "type" ],
            "allOf": [
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "Hand"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "hand": {
                      "enum": ["Both", "Left", "Right"],
                      "description": "Hand same as this"
                    }
                  },
                  "required": ["hand"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "ProjBaseIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Base projectile has this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "EffectHasKwd"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Effect has this keyword"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "EffectsIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Effect has this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "SpellHasKwd"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Spell has a keyword with this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "SpellIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Spell has given formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "CasterIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Actor has this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "CasterBaseIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Actor base has this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "CasterHasKwd"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Actor has a keyword with this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "WeaponBaseIsFormID"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Weapon base has this formID"
                    }
                  },
                  "required": ["formID"]
                }
              },
              {
                "if": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "WeaponHasKwd"
                    }
                  },
                  "required": ["type"]
                },
                "then": {
                  "type": "object",
                  "properties": {
                    "formID": {
                      "$ref": "#/$defs/FormOrID",
                      "description": "Weapon has a keyword with this formID"
                    }
                  },
                  "required": ["formID"]
                }
              }
            ],
            "unevaluatedProperties": false
          }
          
        },
        "TriggerFunctions": { "$ref": "#/$defs/TriggerFunctions" }
      },
      "additionalProperties": false,
      "required": ["event", "TriggerFunctions"]
    },
    "Triggers": {
      "description": "Configure triggers that applies new type for proj",
      "type": "array",
      "items": { "$ref": "#/$defs/Trigger" },
      "additionalProperties": false
    },

    "ifSpawnGroupToTarget": {
      "$comment": "RotationTarget for rotation is ToTarget",
      "if": {
        "type": "object",
        "properties": {
          "rotation": { "type": "string", "const": "ToTarget" }
        },
        "required": ["rotation"]
      },
      "then": {
        "type": "object",
        "properties": {
          "rotationTarget": {
            "$ref": "#/$defs/form_key",
            "description": "A key from HomingData"
          }
        },
        "required": ["rotationTarget"]
      }
    },
    "MulticastSpawnGroups": {
      "description": "Configure different spawn groups for multicast feature",
      "type": "object",
      "patternProperties": {
        "^0x[0-9a-fA-F]{1,8}$|^(key_)": {
          "type": "object",
          "properties": {
            "Pattern": { "$ref": "#/$defs/Pattern" },
            "rotation": {
              "description": "How to rotate projectiles (default: Parallel)",
              "enum": [
                "Parallel",
                "ToSight",
                "ToCenter",
                "FromCenter",
                "ToTarget"
              ]
            },
            "sound": {
              "description": "How many times play sound for a group (default: Single)",
              "enum": ["Single", "Every", "None"]
            },
            "rotOffset": {
              "$ref": "#/$defs/point2",
              "description": "Offset of spawn group rotation from actual cast rotation (default: [0,0])"
            },
            "posRnd": {
              "$ref": "#/$defs/point3",
              "description": "Max delta for random origin (default: [0,0,0])"
            },
            "rotRnd": {
              "$ref": "#/$defs/point2",
              "description": "Rnd rotation offset for every individual proj (default: [0,0])"
            }
          },
          "required": ["Pattern"],
          "allOf": [{ "$ref": "#/$defs/ifSpawnGroupToTarget" }],
          "unevaluatedProperties": false
        },
        "additionalProperties": false
      }
    },

    "MulticastSpell": {
      "properties": {
        "spellID": {
          "type": "string"
        }
      },
      "allOf": [
        { "required": ["spellID"] },
        {
          "not": {
            "type": "object",
            "properties": { "arrowID": {} },
            "required": ["arrowID"]
          }
        },
        {
          "not": {
            "type": "object",
            "properties": { "weapID": {} },
            "required": ["weapID"]
          }
        }
      ],
      "description": "Data for spell projectile"
    },
    "MulticastArrow": {
      "description": "Data for spell projectile",
      "properties": {
        "weapID": {
          "type": "string"
        }
      },
      "allOf": [
        { "required": ["weapID"] },
        {
          "not": {
            "type": "object",
            "properties": { "spellID": {} },
            "required": ["spellID"]
          }
        }
      ]
    },
    "MulticastData": {
      "description": "Configure multicast spells",
      "type": "object",
      "patternProperties": {
        "^0x[0-9a-fA-F]{1,8}$|^(key_)": {
          "type": "array",
          "description": "A set of multicast groups",
          "items": {
            "type": "object",
            "description": "A spawn group with pattern and additional info",
            "properties": {
              "spawn_group": { "$ref": "#/$defs/form_key" },
              "callTriggers": {
                "type": "boolean",
                "description": "Do triggers called on new projectile after spawn (default: false)"
              },
              "TriggerFunctions": { "$ref": "#/$defs/TriggerFunctions" },
              "HomingDetection": {
                "description": "A way to distribute projectiles into targets (default: Individual)",
                "enum": ["Individual", "Evenly"]
              },
              "arrowID": {
                "oneOf": [
                  { "$ref": "#/$defs/FormOrID" },
                  {
                    "type": "string",
                    "const": "Current"
                  }
                ],
                "description": "An arrow to fire"
              },
              "weapID": {
                "oneOf": [
                  { "$ref": "#/$defs/FormOrID" },
                  { "type": "string", "const": "Current" }
                ],
                "description": "A weap that fires"
              },
              "spellID": {
                "oneOf": [
                  { "$ref": "#/$defs/FormOrID" },
                  { "type": "string", "const": "Current" }
                ],
                "description": "A spell to cast"
              }
            },
            "oneOf": [
              { "$ref": "#/$defs/MulticastArrow" },
              { "$ref": "#/$defs/MulticastSpell" }
            ],
            "required": ["spawn_group"],
            "unevaluatedProperties": false
          }
        }
      },
      "additionalProperties": false
    },

    "ifEmitterTriggerFunctions": {
      "$comment": "NewProjsType field for emitter",
      "if": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "const": "TriggerFunctions" }
        },
        "required": ["type"]
      },
      "then": {
        "properties": {
          "TriggerFunctions": { "$ref": "#/$defs/TriggerFunctions" }
        },
        "required": ["TriggerFunctions"]
      }
    },
    "ifEmitterAccelerateToMaxSpeed": {
      "$comment": "time field for emitter",
      "if": {
        "type": "object",
        "properties": {
          "type": { "type": "string", "const": "AccelerateToMaxSpeed" }
        },
        "required": ["type"]
      },
      "then": {
        "type": "object",
        "properties": {
          "time": {
            "type": "number",
            "minimum": 0,
            "description": "A time to accelerate to max speed"
          },
          "speedType": {
            "description": "A type of acceleration, from 1 to max speed with the given time.",
            "enum": ["Linear", "Quadratic", "Exponential"]
          }
        },
        "required": ["time", "speedType"]
      }
    },
    "EmittersData": {
      "description": "Configure emitters spells",
      "type": "object",
      "patternProperties": {
        "^0x[0-9a-fA-F]{1,8}$|^(key_)": {
          "type": "object",
          "description": "An instance of emitter settings",
          "properties": {
            "interval": {
              "type": "number",
              "minimum": 0,
              "description": "An interval of calling functions"
            },
            "limited": {
              "type": "boolean",
              "description": "Does a number of calls is limited (default: false)"
            },
            "count": {
              "type": "integer",
              "description": "A maximum number of calls (default: 1)",
              "maximum": 30
            },
            "destroyAfter": {
              "type": "boolean",
              "description": "Whether to destroy the projectile after function call (default: false)"
            },
            "functions": {
              "type": "array",
              "description": "An array of functions that are called",
              "items": {
                "type": "object",
                "description": "A function that is called in Emitter",
                "properties": {
                  "type": {
                    "enum": ["TriggerFunctions", "AccelerateToMaxSpeed"],
                    "description": "A function to call"
                  }
                },
                "required": ["type"],
                "allOf": [
                  { "$ref": "#/$defs/ifEmitterTriggerFunctions" },
                  { "$ref": "#/$defs/ifEmitterAccelerateToMaxSpeed" }
                ],
                "unevaluatedProperties": false
              }
            }
          },
          "required": ["interval", "functions"],
          "unevaluatedProperties": false
        }
      },
      "additionalProperties": false
    },

    "ifFollowerRounding": {
      "$comment": "size, count for shape of non Single",
      "if": {
        "not": {
          "type": "object",
          "properties": {
            "rounding": { "type": "string", "const": "None" }
          }
        }
      },
      "then": {
        "type": "object",
        "properties": {
          "roundingR": {
            "description": "A radius of floating",
            "type": "number",
            "minimum": 0
          }
        },
        "required": ["roundingR"]
      }
    },
    "FollowersData": {
      "description": "Configure followers spells",
      "type": "object",
      "patternProperties": {
        "^0x[0-9a-fA-F]{1,8}$|^(key_)": {
          "type": "object",
          "description": "An instance of follower properties",
          "properties": {
            "Pattern": { "$ref": "#/$defs/Pattern" },
            "rounding": {
              "description": "Type of floating around the target point. (default: None)",
              "enum": ["None", "Plane", "Sphere"]
            },
            "collision": {
              "description": "Tweak collision. (default: Actor)",
              "enum": ["Actor", "Spell", "None"]
            },
            "speed": {
              "description": "Speed multiplier. Set 0 for instant speed. (default: 1)",
              "type": "number",
              "maximum": 20,
              "minimum": 0
            }
          },
          "allOf": [{ "$ref": "#/$defs/ifFollowerRounding" }],
          "unevaluatedProperties": false,
          "required": ["Pattern"]
        }
      },
      "additionalProperties": false
    }
  }
}
